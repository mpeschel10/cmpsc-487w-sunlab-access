Done:

Next:
systemd timer job to delete old records

Later:
tests
sql prepared statements
authentication someh
separate login page
php support for basic auth instead of nginx
what other kinds of auth are there? digest? token? implement something nicer
what kinds of password hashing do php and nginx support?
    good procedure? what is state of art
        how does twitter google facebook do it?
move to public server on digitalocean
https
basic auth swipe.php
make user.html presentation pretty: Titlecase user.kind, boolean(user.allowed)

Maybe:
live updates (swipe on card-read.html, update gets sent to access.html etc)
add error modal dialogues for when things don't work
user.html:
    user exists error should include name of old duplicated user
    in user.html, give columns a default minimum width or something to reduce jumping around when you add/delete users
    hide borders of text inputs
    changing user id is broken. Should be custom Update() statement, I suppose.
pagination
make access.php named just access
    or access.json
systemd timer to delete old records
sanity checking for "local time" of swipe records if reported time is like, actually close to server time or if we're getting 3-month old spoofed records or what
remove passwords from php lol
self-signed certificate nginx
admin page (user.html)
    sort user table locally
    field to search for specific id
access.html
    fancy timeline of lab access
        add graph lines for how long people are in the lab?
    in table, add "fast search" button for selecting
    in table, highlight alternating days
    in search, +- day, week clickers
    in search, editing any field should tick corresponding checkbox
    in search, user-id should be processed the same as everywhere else
    in search, entering a date without a time should still submit it (midnight on that day)
    in search, add "present at instant" or "present during span"
replace all hyphenated and camelcase json and sql variables with snake-case.
search by user by name


Server notes:
* pacman -S nginx
* systemctl start nginx
# Edit /etc/nginx.conf location block to point to this dir/the other thing
nginx -t
nginx -s reload
* pacman -S php-fpm
* systemctl start php-fpm.service
# Edit /etc/nginx.conf location block to fastcgi_pass unix:/run/php-fpm/php-fpm.sock;
* pacman -S mariadb
# Security recommends on https://wiki.archlinux.org/title/MariaDB
* mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
* systemctl start mariadb
* mariadb
CREATE DATABASE sweng;
USE sweng;
SHOW DATABASES;
system pwd;
source database.sql;
\. database.sql;
CREATE USER AzureDiamond@localhost IDENTIFIED BY "hunter2";
SELECT user FROM mysql.user;
GRANT ALL PRIVILEGES ON sweng.* TO AzureDiamond@localhost;
FLUSH PRIVILEGES;
SHOW GRANTS FOR AzureDiamond@localhost;

# HTTP basic auth
location = /status.txt {
    auth_basic "learning";
    auth_basic_user_file /etc/nginx/.htpasswd;
}
# auth_basic's argument is the "Realm" which is a tag for the set of resources that all use the same keys
sudo htpasswd -c /etc/nginx/.htpasswd AzureDiamond
# type hunter2
sudo htpasswd /etc/nginx/.htpasswd NextUser


functional requirements:
    records older than 5 years must be deleted in a timely manner (probably once per day)
    searchable history of sunlab access.
        search by date, student id, and time range.
        must have GUI.
    must support multiple types of users.
    admin type users must be able to activate, suspend, and reactivate accounts by ID

non-functional requirements:
    use php, mysql/mariadb on centos on digital ocean for backend
    host on local network to begin with
    host on mpeschel10.com for final demo
    
    two tables: access and users
    access has attributes ID, in/out, timestamp
    users has attributes ID, name, user_type, is_active
    
    one of those SQL functions to delete all records older than 5 years
    script on systemd timer that deletes records older than 5 years
    
    test script to insert a bunch of junk historical records


    html/css/js page for administrator front-end. No framework for now.
    probably python on systemd timer for card reader front-end? Not necessary until 

Assumptions:
    two separate clients:
        one to read from card swipe and send data to https endpoint
        one to read and display history of thing from web server

